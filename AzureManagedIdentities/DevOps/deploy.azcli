# Switch to correct subscription
# az account set --subscription b33f0285-db27-4896-ac5c-df22004b0aba
# az account show --output table

# Region to use
LOCATION=westeurope

# Deploy resource group
RGNAMES=$(az deployment sub create \
    --name Deployment-$(date +"%Y-%m-%dT%H-%M-%S") \
    --template-file resource-group.bicep \
    --location $LOCATION \
    | jq .properties.outputs)
RG=$(echo $RGNAMES | jq -r .rgName.value)

# Deploy resources

# In development and test stages, the developer needs access to data stores.
# Variables should remain empty if the environment is production (i.e. no
# access to data by devs is required).
USERID=$(az ad signed-in-user show | jq .id -r)
USERNAME=$(az ad signed-in-user show | jq .userPrincipalName -r)
# USERID=''
# USERNAME=''

#CONTAINER=nginx:alpine
CONTAINER=acrsbwa7dm5lugos.azurecr.io/azmgedid:latest

# FUNCPUBLICACCESS=Enabled
FUNCPUBLICACCESS=Disabled

APPNAMES=$(az deployment group create \
    --resource-group $RG \
    --name Deployment-$(date +"%Y-%m-%dT%H-%M-%S") \
    --template-file infrastructure.bicep \
    --parameters \
        adminPrincipalId=$USERID \
        adminPrincipalName=$USERNAME \
        containerName=$CONTAINER \
        funcPublicAccess=$FUNCPUBLICACCESS \
    | jq .properties.outputs)
FUNCNME=$(echo $APPNAMES | jq -r .funcName.value)
WEBAPPNAME=$(echo $APPNAMES | jq -r .webAppName.value)

# Don't forget to create users in DB
echo "CREATE USER [$FUNCNME] FROM EXTERNAL PROVIDER
EXEC sp_addrolemember 'db_owner', [$FUNCNME]
CREATE USER [$WEBAPPNAME] FROM EXTERNAL PROVIDER
EXEC sp_addrolemember 'db_owner', [$WEBAPPNAME]"

# Create app registration
DISPLAY_NAME=BackendApi
APP_ID_URL=api://backend-api.rainertimecockpit.onmicrosoft.com
# Check if app registration exists
AADAPPREG=$(az ad app list --display-name $DISPLAY_NAME)
if [ $(echo $AADAPPREG | jq length) == '0' ]
then
    # App registration does not exist -> create it
    AADAPPREG=$(az ad app create --display-name $DISPLAY_NAME --sign-in-audience AzureADMyOrg)
else
    # App registration exists -> we do not need to create a new one
    AADAPPREG=$(echo $AADAPPREG | jq '.[0]')
fi
# Get app id and object id from app registration JSON
APPID=$(jq '.appId' -r <<< $AADAPPREG)
OBJID=$(jq '.id' -r <<< $AADAPPREG)

# Update app ID URL
az ad app update --id $APPID --identifier-uris $APP_ID_URL

# DOCKER (Web App)
az acr login --name acrsbwa7dm5lugos
docker build -t acrsbwa7dm5lugos.azurecr.io/azmgedid .
docker push acrsbwa7dm5lugos.azurecr.io/azmgedid

# Function App (run from package)
func azure functionapp publish func-sbwa7dm5lugos

# Demonstrate Managed Identity with curl
ACCESS_TOKEN=$(curl -sS --header "Metadata: true" "http://169.254.169.254/metadata/identity/oauth2/token?api-version=2018-02-01&resource=https://vault.azure.net" | jq .access_token -r)
curl -sS --header "Authorization: Bearer $ACCESS_TOKEN" https://kv-sbwa7dm5lugos.vault.azure.net/secrets/mySecret?api-version=7.3 | jq
